(** This module only serves the purpose of making external types (that is,
defined in other libraries) serialisable. External types should be copied here,
and the newly defined type should then be used everywhere. *)

type ('a, 'b) s_result = ('a, 'b) result =
  | Ok of 'a
  | Error of 'b
[@@deriving yojson]

(* Colis.Symbolic.Semantics.state and its dependencies. Basically, we copy all
   the definitions generated by Why3. *)

type colis_filesystem = Colis.Symbolic.Filesystem.filesystem =
  { root: Colis_constraints.Var.t;
    clause: Colis_constraints.Clause.sat_conj;
    root0: (Colis_constraints.Var.t) option; }
[@@deriving yojson]

type colis_stdout = Colis.Common.Stdout.t =
  { line: string;
    lines: (string) list; }
[@@deriving yojson]

type colis_symbolic_state = Colis.Symbolic.Semantics.state =
  { filesystem: colis_filesystem ;
    stdin: (string) list;
    stdout: colis_stdout;
    log: colis_stdout; }
[@@deriving yojson]
